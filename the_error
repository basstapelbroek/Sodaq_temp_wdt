//Slaapmodus aan
void systemSleep()
{
#ifdef ARDUINO_ARCH_AVR

  // Wait till the output has been transmitted
  DIAG_STREAM.flush();
 
  ADCSRA &= ~_BV(ADEN);         // ADC disabled

  /*
  * Possible sleep modes are (see sleep.h):
  #define SLEEP_MODE_IDLE         (0)
  #define SLEEP_MODE_ADC          _BV(SM0)
  #define SLEEP_MODE_PWR_DOWN     _BV(SM1)
  #define SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
  #define SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
  #define SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))
  */
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);

  /*
   * This code is from the documentation in avr/sleep.h
   */
  cli();
  // Only go to sleep if there was no watchdog interrupt.
  if (!sodaq_wdt_flag)
  {
    // Power on LED before sleep
    digitalWrite(SLEEP_LED, HIGH);
    
    sleep_enable();
    sei();
    sleep_cpu();
    sleep_disable();

    // Power off LED after sleep
    digitalWrite(SLEEP_LED, LOW);
    sodaq_wdt_safe_delay(LED_FLASH_MS);
  }
  sei();

  ADCSRA |= _BV(ADEN);          // ADC enabled
  
#elif ARDUINO_ARCH_SAMD

  // Only go to sleep if there was no watchdog interrupt.
  if (!sodaq_wdt_flag)
  {
    // Power on LED before sleep
    digitalWrite(SLEEP_LED, HIGH);
    
    // Disable USB
    USBDevice.detach();

    // Set the sleep mode
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    
    // SAMD sleep
    __WFI();
    
    // Power off LED after sleep
    digitalWrite(SLEEP_LED, LOW);
    sodaq_wdt_safe_delay(LED_FLASH_MS);
  }
  
#endif
}


String takeTPHReading()

{
  //Create a String type data record in csv format
  //TempSHT21, TempBMP, PressureBMP, HumiditySHT21
 
  String data = temp3 + "; ";

  
  //String data = String(SHT2x.GetTemperature())  + ", ";
  //data += String(bmp.readTemperature()) + ", ";
  //data += String(bmp.readPressure() / 100)  + ", ";
  //data += String(SHT2x.GetHumidity());
  debugSerial.println(data);

  return data;
}
